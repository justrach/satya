name: Release Process

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump_version.outputs.new_version }}
      release_created: ${{ steps.create_release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install bumpversion gitpython pyyaml pytest pytest-cov
          
          # Create virtual environment for any potential testing
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install maturin
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Bump version
        id: bump_version
        run: |
          # Install bump2version if not available
          pip install bump2version
          
          # Extract current version from pyproject.toml
          CURRENT_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version in both pyproject.toml and Cargo.toml
          bump2version --current-version $CURRENT_VERSION ${{ github.event.inputs.version_bump }} pyproject.toml Cargo.toml --allow-dirty
          
          # Get new version
          NEW_VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          
          if [[ "$LATEST_TAG" == "none" ]]; then
            # No tags yet, use all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Write changelog to file
          echo "# Changes in v${{ steps.bump_version.outputs.new_version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          
          # Escape changelog for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
      
      - name: Commit version bump
        run: |
          git add pyproject.toml Cargo.toml CHANGELOG.md
          git commit -m "Bump version to v${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push && git push --tags
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
        
      - name: Set release created output
        if: steps.create_release.outcome == 'success'
        id: release_created
        run: echo "release_created=true" >> $GITHUB_OUTPUT

  # This will trigger the wheel building workflow which runs on tag push
  wait_for_wheels:
    needs: prepare_release
    if: needs.prepare_release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for wheel building
        run: |
          echo "Triggered wheel building workflow via tag push"
          echo "Waiting for wheel building to complete..."
          # Sleep to allow wheels workflow to start
          sleep 60
          
          # Poll for workflow completion
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking build-wheels workflow status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            
            # Get workflow runs for the tag
            WORKFLOW_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                  "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-wheels.yml/runs?event=push&status=completed" | \
                               jq -r '.workflow_runs[] | select(.head_branch == "v${{ needs.prepare_release.outputs.version }}") | .conclusion')
            
            if [ "$WORKFLOW_STATUS" == "success" ]; then
              echo "Wheel building completed successfully!"
              break
            elif [ "$WORKFLOW_STATUS" == "failure" ]; then
              echo "Wheel building failed!"
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            sleep 60
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for wheel building to complete"
            exit 1
          fi

  update_docs:
    needs: [prepare_release, wait_for_wheels]
    if: needs.prepare_release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Update documentation version references
        run: |
          VERSION="${{ needs.prepare_release.outputs.version }}"
          
          # Update version references in README
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION/g" README.md
          sed -i "s/Satya is currently in alpha (v[0-9]\+\.[0-9]\+\.[0-9]\+)/Satya is currently in alpha (v$VERSION)/g" README.md
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update documentation for v$VERSION" || echo "No changes to commit"
          git push origin main 